Testing started at 15:16 ...
C:\Users\AndrewMacCormack\PycharmProjects\igsqatest\venv\Scripts\python.exe "C:\Program Files\JetBrains\PyCharm Community Edition 2019.3.4\plugins\python-ce\helpers\pycharm\_jb_pytest_runner.py" --path ""
Launching pytest with arguments  in C:\Users\AndrewMacCormack\PycharmProjects\igsqatest

============================= test session starts =============================
platform win32 -- Python 3.6.4, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- C:\Users\AndrewMacCormack\PycharmProjects\igsqatest\venv\Scripts\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\AndrewMacCormack\PycharmProjects\igsqatest
collecting ... collected 29 items

test_00_products.py::test_products_at_startup PASSED                     [  3%]
test_00_products.py::test_put_products PASSED                            [  6%]
test_00_products.py::test_post_products PASSED                           [ 10%]
test_00_products.py::test_delete_products PASSED                         [ 13%]
test_01_product_get.py::test_product_get_at_startup[1-expected0]
test_01_product_get.py::test_product_get_at_startup[2-expected1]
test_01_product_get.py::test_product_get_at_startup[3-expected2] PASSED  [ 17%]PASSED  [ 20%]FAILED  [ 24%]
test_01_product_get.py:11 (test_product_get_at_startup[3-expected2])
{'id': 3, 'name': 'Kids T-shirt', 'price': '19.95'} != {'id': 3, 'name': 'Kids T-shirt Kids T-shirt', 'price': '19.95'}

Expected :{'id': 3, 'name': 'Kids T-shirt Kids T-shirt', 'price': '19.95'}
Actual   :{'id': 3, 'name': 'Kids T-shirt', 'price': '19.95'}
<Click to see difference>

test_input = 3
expected = {'id': 3, 'name': 'Kids T-shirt Kids T-shirt', 'price': '19.95'}

    @pytest.mark.parametrize("test_input,expected", [(x["id"], x) for x in compare_data])
    def test_product_get_at_startup(test_input, expected):
        resp = get_product(test_input)
        assert resp.status_code == 200
        resp_body = resp.json()
>       assert resp_body == expected
E       AssertionError: assert {'id': 3, 'name': 'Kids T-shirt', 'price': '19.95'} == {'id': 3, 'name': 'Kids T-shirt Kids T-shirt', 'price': '19.95'}

test_01_product_get.py:17: AssertionError

Assertion failed

Assertion failed

test_01_product_get.py::test_product_get_nonexistent[-1] PASSED          [ 27%]
test_01_product_get.py::test_product_get_nonexistent[0] PASSED           [ 31%]
test_01_product_get.py::test_product_get_nonexistent[4] PASSED           [ 34%]
test_01_product_get.py::test_product_get_nonexistent[9999] PASSED        [ 37%]
test_01_product_get.py::test_product_get_malformed[blargh] PASSED        [ 41%]
test_01_product_get.py::test_product_get_malformed[] FAILED              [ 44%]
test_01_product_get.py:24 (test_product_get_malformed[])
405 != 400

Expected :400
Actual   :405
<Click to see difference>

test_input = ''

    @pytest.mark.parametrize("test_input", ["blargh", "", "null"])
    def test_product_get_malformed(test_input):
        resp = get_product(test_input)
        # Assume 400 error is correct for malformed
>       assert resp.status_code == 400
E       assert 405 == 400

test_01_product_get.py:29: AssertionError

test_01_product_get.py::test_product_get_malformed[null]
test_02_product_post_delete.py::test_product_post[test_input0] PASSED          [ 48%]
Assertion failed

Assertion failed
PASSED    [ 51%]
test_02_product_post_delete.py::test_product_post[test_input1] PASSED    [ 55%]
test_02_product_post_delete.py::test_product_post[test_input2] PASSED    [ 58%]
test_02_product_post_delete.py::test_product_post[test_input3] PASSED    [ 62%]
test_02_product_post_delete.py::test_product_post[test_input4] PASSED    [ 65%]
test_02_product_post_delete.py::test_product_delete PASSED               [ 68%]
test_02_product_post_delete.py::test_product_post_after_delete FAILED    [ 72%]
test_02_product_post_delete.py:36 (test_product_post_after_delete)
def test_product_post_after_delete():
        initial_state = get_products().json()
        #Check before we start
        assert no_duplicate_fields(initial_state)
        test_product_delete(2)
        resp=post_product({"Name": "Nine"})
        new_state=get_products().json()
        # Back to original size
        assert len(new_state) == len(initial_state)
>       assert no_duplicate_fields(new_state)
E       AssertionError: assert False
E        +  where False = no_duplicate_fields([{'id': 3, 'name': 'Kids T-shirt Kids T-shirt', 'price': '19.95'}, {'id': 4, 'name': None, 'price': '0.00'}, {'id': 5,...': None, 'price': '6.00'}, {'id': 7, 'name': 'Seven', 'price': '-7.00'}, {'id': 8, 'name': None, 'price': '0.00'}, ...])

test_02_product_post_delete.py:46: AssertionError

test_02_product_post_delete.py::test_product_delete_nonexistent[-1] PASSED [ 75%]
test_02_product_post_delete.py::test_product_delete_nonexistent[0] PASSED [ 79%]
test_02_product_post_delete.py::test_product_delete_nonexistent[9999] PASSED [ 82%]
test_03_product_put.py::test_product_put
Assertion failed

Assertion failed
FAILED                          [ 86%]
test_03_product_put.py:10 (test_product_put)
{'id': 3, 'name': 'Kids T-shirt_newname', 'price': '3.14'} != {'id': 3, 'name': 'Kids T-shirt_newname', 'price': '3.14159'}

Expected :{'id': 3, 'name': 'Kids T-shirt_newname', 'price': '3.14159'}
Actual   :{'id': 3, 'name': 'Kids T-shirt_newname', 'price': '3.14'}
<Click to see difference>

def test_product_put():
        initial_count=len(get_products().json())
        id=3
        initial_data=get_product(id).json()
        new_data={"Id": id, "Name": initial_data["name"]+"_newname", "Price": 3.14159}
        # Handle the different capitalization in responses to data passed in, and convert price to string as in spec
        expected_data={k.lower(): v for k,v in new_data.items()}
        expected_data["price"]=str(expected_data["price"])

        resp=put_product(id, new_data)
        assert resp.status_code == 200
        # Still same number of products overall
        assert len(get_products().json()) == initial_count
        actual_data=get_product(id).json()
        assert actual_data != initial_data
>       assert actual_data == expected_data
E       AssertionError: assert {'id': 3, 'name': 'Kids T-shirt_newname', 'price': '3.14'} == {'id': 3, 'name': 'Kids T-shirt_newname', 'price': '3.14159'}

test_03_product_put.py:26: AssertionError

test_03_product_put.py::test_product_put_other_fields PASSED             [ 89%]
test_03_product_put.py::test_product_put_nonexistent[-1] FAILED          [ 93%]
test_03_product_put.py:37 (test_product_put_nonexistent[-1])
426 != 404

Expected :404
Actual   :426
<Click to see difference>

test_input = -1

    @pytest.mark.parametrize("test_input", [-1, 0, 9999])
    def test_product_put_nonexistent(test_input):
        resp = put_product(test_input, {"Id": test_input, "Name": "nullname", "Price": 9.99})
        # Assume 404 is correct for non-existent entries
>       assert resp.status_code == 404
E       assert 426 == 404

test_03_product_put.py:42: AssertionError
FAILED           [ 96%]
test_03_product_put.py:37 (test_product_put_nonexistent[0])
426 != 404

Expected :404
Actual   :426
<Click to see difference>

test_input = 0

    @pytest.mark.parametrize("test_input", [-1, 0, 9999])
    def test_product_put_nonexistent(test_input):
        resp = put_product(test_input, {"Id": test_input, "Name": "nullname", "Price": 9.99})
        # Assume 404 is correct for non-existent entries
>       assert resp.status_code == 404
E       assert 426 == 404

test_03_product_put.py:42: AssertionError
FAILED        [100%]
test_03_product_put.py:37 (test_product_put_nonexistent[9999])
426 != 404

Expected :404
Actual   :426
<Click to see difference>

test_input = 9999

    @pytest.mark.parametrize("test_input", [-1, 0, 9999])
    def test_product_put_nonexistent(test_input):
        resp = put_product(test_input, {"Id": test_input, "Name": "nullname", "Price": 9.99})
        # Assume 404 is correct for non-existent entries
>       assert resp.status_code == 404
E       assert 426 == 404

test_03_product_put.py:42: AssertionError

Assertion failed

Assertion failed

test_03_product_put.py::test_product_put_nonexistent[0]
test_03_product_put.py::test_product_put_nonexistent[9999]

================================== FAILURES ===================================
__________________ test_product_get_at_startup[3-expected2] ___________________

test_input = 3
expected = {'id': 3, 'name': 'Kids T-shirt Kids T-shirt', 'price': '19.95'}

    @pytest.mark.parametrize("test_input,expected", [(x["id"], x) for x in compare_data])
    def test_product_get_at_startup(test_input, expected):
        resp = get_product(test_input)
        assert resp.status_code == 200
        resp_body = resp.json()
>       assert resp_body == expected
E       AssertionError: assert {'id': 3, 'name': 'Kids T-shirt', 'price': '19.95'} == {'id': 3, 'name': 'Kids T-shirt Kids T-shirt', 'price': '19.95'}

test_01_product_get.py:17: AssertionError
________________________ test_product_get_malformed[] _________________________

test_input = ''

    @pytest.mark.parametrize("test_input", ["blargh", "", "null"])
    def test_product_get_malformed(test_input):
        resp = get_product(test_input)
        # Assume 400 error is correct for malformed
>       assert resp.status_code == 400
E       assert 405 == 400

test_01_product_get.py:29: AssertionError
_______________________ test_product_post_after_delete ________________________

    def test_product_post_after_delete():
        initial_state = get_products().json()
        #Check before we start
        assert no_duplicate_fields(initial_state)
        test_product_delete(2)
        resp=post_product({"Name": "Nine"})
        new_state=get_products().json()
        # Back to original size
        assert len(new_state) == len(initial_state)
>       assert no_duplicate_fields(new_state)
E       AssertionError: assert False
E        +  where False = no_duplicate_fields([{'id': 3, 'name': 'Kids T-shirt Kids T-shirt', 'price': '19.95'}, {'id': 4, 'name': None, 'price': '0.00'}, {'id': 5,...': None, 'price': '6.00'}, {'id': 7, 'name': 'Seven', 'price': '-7.00'}, {'id': 8, 'name': None, 'price': '0.00'}, ...])

test_02_product_post_delete.py:46: AssertionError
______________________________ test_product_put _______________________________

    def test_product_put():
        initial_count=len(get_products().json())
        id=3
        initial_data=get_product(id).json()
        new_data={"Id": id, "Name": initial_data["name"]+"_newname", "Price": 3.14159}
        # Handle the different capitalization in responses to data passed in, and convert price to string as in spec
        expected_data={k.lower(): v for k,v in new_data.items()}
        expected_data["price"]=str(expected_data["price"])

        resp=put_product(id, new_data)
        assert resp.status_code == 200
        # Still same number of products overall
        assert len(get_products().json()) == initial_count
        actual_data=get_product(id).json()
        assert actual_data != initial_data
>       assert actual_data == expected_data
E       AssertionError: assert {'id': 3, 'name': 'Kids T-shirt_newname', 'price': '3.14'} == {'id': 3, 'name': 'Kids T-shirt_newname', 'price': '3.14159'}

test_03_product_put.py:26: AssertionError
______________________ test_product_put_nonexistent[-1] _______________________

test_input = -1

    @pytest.mark.parametrize("test_input", [-1, 0, 9999])
    def test_product_put_nonexistent(test_input):
        resp = put_product(test_input, {"Id": test_input, "Name": "nullname", "Price": 9.99})
        # Assume 404 is correct for non-existent entries
>       assert resp.status_code == 404
E       assert 426 == 404

test_03_product_put.py:42: AssertionError
_______________________ test_product_put_nonexistent[0] _______________________

test_input = 0

    @pytest.mark.parametrize("test_input", [-1, 0, 9999])
    def test_product_put_nonexistent(test_input):
        resp = put_product(test_input, {"Id": test_input, "Name": "nullname", "Price": 9.99})
        # Assume 404 is correct for non-existent entries
>       assert resp.status_code == 404
E       assert 426 == 404

test_03_product_put.py:42: AssertionError
_____________________ test_product_put_nonexistent[9999] ______________________

test_input = 9999

    @pytest.mark.parametrize("test_input", [-1, 0, 9999])
    def test_product_put_nonexistent(test_input):
        resp = put_product(test_input, {"Id": test_input, "Name": "nullname", "Price": 9.99})
        # Assume 404 is correct for non-existent entries
>       assert resp.status_code == 404
E       assert 426 == 404

test_03_product_put.py:42: AssertionError
=========================== short test summary info ===========================
FAILED test_01_product_get.py::test_product_get_at_startup[3-expected2] - Ass...
FAILED test_01_product_get.py::test_product_get_malformed[] - assert 405 == 400
FAILED test_02_product_post_delete.py::test_product_post_after_delete - Asser...
FAILED test_03_product_put.py::test_product_put - AssertionError: assert {'id...
FAILED test_03_product_put.py::test_product_put_nonexistent[-1] - assert 426 ...
FAILED test_03_product_put.py::test_product_put_nonexistent[0] - assert 426 =...
FAILED test_03_product_put.py::test_product_put_nonexistent[9999] - assert 42...
======================== 7 failed, 22 passed in 1.16s =========================

Process finished with exit code 0

Assertion failed

Assertion failed

Assertion failed

Assertion failed
